import discord
from discord.ext import tasks
from tortoise.exceptions import IntegrityError

import config
from src import Pig, Piggy


class Admin(discord.Cog):
    def __init__(self, bot):
        self.bot: Piggy = bot
        self.activity_updater.start()

    def cog_check(self, ctx: discord.ApplicationContext):
        return ctx.author.id in config.ADMINS

    admin = discord.SlashCommandGroup(name='admin', description='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    set = admin.create_subgroup(name='set')

    @set.command(name='name', description='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ª—é–±–æ–≥–æ —Ö—Ä—è–∫–∞')
    async def set_name(
            self, ctx: discord.ApplicationContext,
            name: discord.Option(str, description="–ò–º—è —Ö—Ä—è–∫–∞ (—É—á. —Ä–µ–≥–∏—Å—Ç—Ä)", max_length=30),
            new_name: discord.Option(str, description='–ù–æ–≤–æ–µ –∏–º—è', max_length=20)
    ):
        pig = await Pig.get_by_name(name)

        if pig is None:
            return await ctx.respond('üò¢ –•—Ä—è–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º - –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral=True)

        old_name = pig.name
        try:
            await pig.set_name(new_name)
        except IntegrityError:
            return await ctx.respond(f'–ò–º—è {new_name} —É–∂–µ –∑–∞–Ω—è—Ç–æ üò¢', ephemeral=True)

        await ctx.respond(f'–ò–º—è —Ö—Ä—è–∫–∞ `ID: {pig.id}` —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Å `{old_name}` –Ω–∞ `{pig.name}`.', ephemeral=True)

    @tasks.loop(minutes=10)
    async def activity_updater(self):
        await self.bot.wait_until_ready()
        await self.bot.change_presence(activity=discord.Game(name=f'{self.bot.member_count} users'))


def setup(bot):
    bot.add_cog(Admin(bot))
