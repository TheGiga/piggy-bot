import datetime
import logging
import random
from typing import Any

import discord
from discord.ext.commands import cooldown, BucketType
from tortoise.exceptions import IntegrityError
from tortoise.queryset import QuerySet

import config
from src import Piggy, User, Pig, DefaultEmbed

words = {
    "weight": {
        "ru": "–í–µ—Å",
        "uk": "–í–∞–≥–∞",
        "en_US": "Weight"
    },

    "age": {
        "ru": "–í–æ–∑—Ä–∞—Å—Ç",
        "uk": "–í—ñ–∫",
        "en_US": "Age"
    },

    "days": {
        "ru": "–¥–Ω.",
        "uk": "–¥–Ω.",
        "en_US": "d."
    },

    "name": {
        "ru": "–ò–º—è",
        "uk": "–Ü–º'—è",
        "en_US": "Name"
    }
}

def trw(word, locale, default='en_US'):
    x = words[word].get(locale)

    return x if x else words[word].get(default)

def tr(responses, locale, default = "en_US"):
    x = responses.get(locale)
    return x if x else responses.get(default)

class Pigs(discord.Cog):
    def __init__(self, bot):
        self.bot: Piggy = bot

    @discord.slash_command(
        name='pig',
        description='üê∑ Information about specific pig',
        description_localizations={
            "ru": "üê∑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä—è–∫–µ",
            "uk": "üê∑ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ö—Ä—è–∫–∞"
        }
    )
    @cooldown(1, 5, BucketType.user)
    async def pig(
            self, ctx: discord.ApplicationContext, name: discord.Option(
                str, description="name (case sensitive) | –∏–º—è (—É—á. —Ä–µ–≥–∏—Å—Ç—Ä)", required=False
            ) = None
    ):
        author, _ = await User.get_or_create(discord_id=ctx.user.id)

        locale = ctx.interaction.locale

        not_found = {
            "ru": "üò¢ –•—Ä—è–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º - –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            "uk": "üò¢ –•—Ä—è–∫ –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.",
            "en_US": "üò¢ Pig with such name is not found."
        }

        if name is None:
            pig = await author.get_pig()
        else:
            pig = await Pig.get_by_name(name)

            if pig is None:
                return await ctx.respond(tr(not_found, locale), ephemeral=True)

        embed = await pig.get_embed(ctx.interaction.locale)

        await ctx.respond(embed=embed)

    @discord.slash_command(
        name='feed',
        description='üê∑ Feed your pig',
        description_localizations={
            "ru": "üê∑ –ü–æ–∫–æ—Ä–º–∏—Ç—å —Å–≤–æ–µ–≥–æ —Ö—Ä—è–∫–∞",
            "uk": "üê∑ –ü–æ–∫–æ—Ä–º–∏—Ç–∏ —Å–≤–æ–≥–æ —Ö—Ä—è–∫–∞"
        }
    )
    @cooldown(1, 10800, BucketType.user)
    async def feed(self, ctx: discord.ApplicationContext):
        try:
            await ctx.defer()
        except discord.NotFound:
            print(f'Cannot defer in /feed, like always... (by {ctx.user}, at: {datetime.datetime.utcnow()} UTC)')
            pass

        locale = ctx.interaction.locale

        responses = {
            "-": {
                "ru": '–í–∞—à —Ö—Ä—è–∫ –ø–æ—Ö—É–¥–µ–ª –Ω–∞ **{} –∫–≥** üò¢',
                "uk": '–í–∞—à —Ö—Ä—è–∫ —Å–∫–∏–Ω—É–≤ —Å–∞–ª–æ–≤–æ—ó –º–∞—Å–∏ –Ω–∞ **{} –∫–≥** üò¢',
                "en_US": 'Your pig lost **{} kg** in weight üò¢'
            },
            "+": {
                "ru": '–í–∞—à —Ö—Ä—è–∫ –ø–æ–∂–∏—Ä–Ω–µ–ª –Ω–∞ **{} –∫–≥** üòé',
                "uk": '–í–∞—à —Ö—Ä—è–∫ –Ω–∞–≥–Ω–∞–≤ —Å–∞–ª–æ–≤–æ—ó –º–∞—Å–∏ –Ω–∞ **{} –∫–≥** üòé',
                "en_US": 'Your pig gained **{} kg** in weight üòé'
            },
            "=": {
                "ru": '–ú–∞—Å—Å–∞ –≤–∞—à–µ–≥–æ —Ö—Ä—è–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å... üê∑',
                "uk": '–ú–∞—Å–∞ –≤–∞—à–æ–≥–æ —Ö—Ä—è–∫–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è... üê∑',
                "en_US": "Weight of your pig didn't change... üê∑"
            },
        }

        user, _ = await User.get_or_create(discord_id=ctx.user.id)
        pig = await user.get_pig()

        if 0 <= pig.weight <= 50:
            fat = random.randint(0, 30)
        else:
            fat = random.randint(-20, 30)

        old_weight = pig.weight

        await pig.add_weight(fat)

        if pig.weight < 0:
            pig.weight = 0
            await pig.save()

            fat = -old_weight

        embed = DefaultEmbed()
        embed.title = pig.name

        embed.add_field(name=f"üê∑ {trw('weight', locale)}", value=f'{pig.weight} kg.')
        embed.add_field(name=f"üïê {trw('age', locale)}", value=f"{pig.age.days} {trw('days', locale)}")
        embed.set_thumbnail(url='https://i.imgur.com/N45Jkdo.png')

        if fat < 0:
            embed.description = tr(responses["-"], locale).format(abs(fat))
        elif fat > 0:
            embed.description = tr(responses["+"], locale).format(fat)
        else:
            embed.description = tr(responses["="], locale)

        try:
            await ctx.respond(embed=embed)
        except discord.NotFound:
            await ctx.send(content=f"{ctx.user.mention}", embed=embed)

    @discord.slash_command(
        name='name',
        description="üê∑ Change Pig's name",
        description_localizations={
            "ru": "üê∑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Å–≤–æ–µ–≥–æ —Ö—Ä—è–∫–∞",
            "uk": "üê∑ –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è —Å–≤–æ–≥–æ —Ö—Ä—è–∫–∞"
        }
    )
    @cooldown(1, 30, BucketType.user)
    async def name(self, ctx: discord.ApplicationContext, name: discord.Option(str, "PIG'S NAME", max_length=20)):
        locale = ctx.interaction.locale

        responses = {
            "same_name": {
                "ru": "ü§® –í—ã —É–∂–µ –¥–∞–ª–∏ —Ç–∞–∫–æ–µ-–∂–µ –∏–º—è —Å–≤–æ–µ–º—É —Ö—Ä—è–∫—É.",
                "uk": "ü§® –í–∏ –≤–∂–µ –¥–∞–ª–∏ —Ç–∞–∫–µ —Å–∞–º–µ —ñ–º'—è —Å–≤–æ–º—É —Ö—Ä—è–∫—É.",
                "en_US": "ü§® You've already set the same name for your pig."
            },
            "already_exists": {
                "ru": "–ò–º—è `{}` —É–∂–µ –∑–∞–Ω—è—Ç–æ üò¢",
                "uk": "–Ü–º'—è `{}` –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ üò¢",
                "en_US": "The name `{}` is already taken üò¢"
            },
            "created": {
                "ru": "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Ö—Ä—è–∫–∞ —Å –∏–º–µ–Ω–µ–º `{}`",
                "uk": "‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–∏–ª–∏ —Ö—Ä—è–∫–∞ –∑ —ñ–º–µ–Ω–µ–º `{}`",
                "en_US": "‚úÖ You have successfully created a pig with name `{}`"
            },
            "changed": {
                "ru": "‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∏–º—è —Å–≤–æ–µ–≥–æ —Ö—Ä—è–∫–∞ —Å `{old}` –Ω–∞ `{new}`.",
                "uk": "‚òëÔ∏è –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–∏–ª–∏ —ñ–º'—è —Å–≤–æ–≥–æ —Ö—Ä—è–∫–∞ –∑ `{old}` –Ω–∞ `{new}`.",
                "en_US": "‚òëÔ∏è You have successfully changed your pig's name from `{old}` to `{new}`."
            }
        }

        user, created = await User.get_or_create(discord_id=ctx.user.id)
        pig = await user.get_pig()
        old_name = pig.name

        if pig.name == name:
            return await ctx.respond(tr(responses["same_name"], locale), ephemeral=True)

        try:
            await pig.set_name(name)
        except IntegrityError:
            return await ctx.respond(tr(responses["already_exists"], locale).format(name), ephemeral=True)

        if created:
            return await ctx.respond(tr(responses["created"], locale).format(name), ephemeral=True)

        try:
            await ctx.respond(
                tr(responses["changed"], locale).format(old=old_name, new=name),
                ephemeral=True
            )
        except discord.NotFound:
            await ctx.send(
                tr(responses["changed"], locale).format(old=old_name, new=name)
            )


    @cooldown(1, 5, BucketType.user)
    @discord.slash_command(
        name='top',
        description='üê∑ Top 10 pigs by weight',
        description_localizations={
            "ru": "üê∑ –¢–æ–ø —Ö—Ä—è–∫–æ–≤ –ø–æ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å–µ",
            "uk": "üê∑ –¢–æ–ø 10 —Ö—Ä—è–∫—ñ–≤ –∑–∞ —Å–∞–ª–æ–≤–∏–º –∑–∞–ø–∞—Å–æ–º"
        }
    )
    async def top(self, ctx: discord.ApplicationContext):
        await ctx.defer()

        query_set: list[Pig, Any] = await QuerySet(Pig).order_by('-weight').limit(10)

        leaderboard_content = ""

        for i, pig in enumerate(query_set, 1):
            discord_user = await pig.get_owner()
            leaderboard_content += f"{i}. {pig.name} - {pig.weight} kg.\n- # {discord_user}\n"

        leaderboard = f"```glsl\n{leaderboard_content}```"

        embed = DefaultEmbed()
        embed.title = "üê∑ TOP 10"
        embed.description = leaderboard

        await ctx.respond(embed=embed)

    @cooldown(1, 60, BucketType.user)
    @discord.slash_command(
        name='report',
        description='üêñ Report user',
        description_localizations={
            "ru": "üêñ –ñ–∞–ª–æ–±–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ö—Ä—è–∫–∞",
            "uk": "üêñ –°–∫–∞—Ä–≥–∞ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
        }
    )
    async def report(
            self, ctx: discord.ApplicationContext,
            name: discord.Option(str, description="–ò–º—è —Ö—Ä—è–∫–∞ (—É—á. —Ä–µ–≥–∏—Å—Ç—Ä)", max_length=30),
            reason: discord.Option(str, choices=config.REPORT_REASONS)
    ):
        await ctx.defer(ephemeral=True)

        locale = ctx.interaction.locale

        responses = {
            "not_found": {
                "ru": "üò¢ –•—Ä—è–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º - –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                "uk": "üò¢ –•—Ä—è–∫ –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.",
                "en_US": "üò¢ Pig with such name is not found."
            },

            "success": {
                "ru": "‚òëÔ∏è –†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–ø–∞—Å–∏–±–æ!",
                "uk": "‚òëÔ∏è –†–µ–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥—è–∫—É—î–º–æ!",
                "en_US": "‚òëÔ∏è Thanks for the report!"
            }
        }

        pig = await Pig.get_by_name(name)

        if pig is None:
            return await ctx.respond(tr(responses["not_found"], locale), ephemeral=True)

        await ctx.defer(ephemeral=True)

        pig_owner = await pig.get_owner()

        await self.bot.send_critical_log(
            f'–†–µ–ø–æ—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{ctx.user}` –Ω–∞ —Ö—Ä—è–∫–∞ `{pig.name}`, —Ö–æ–∑—è–∏–Ω: `{pig_owner} ({pig_owner.id})`'
            f'\n- –ü—Ä–∏—á–∏–Ω–∞: `{reason}` ||<@352062534469156864>||', logging.CRITICAL
        )

        await ctx.respond(tr(responses["success"], locale), ephemeral=True)


def setup(bot):
    bot.add_cog(Pigs(bot))
