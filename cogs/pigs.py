import logging
import random
from typing import Any

import discord
from discord.ext.commands import cooldown, BucketType
from tortoise.exceptions import IntegrityError
from tortoise.queryset import QuerySet

import config
from src import Piggy, User, Pig, DefaultEmbed


class Pigs(discord.Cog):
    def __init__(self, bot):
        self.bot: Piggy = bot

    @discord.slash_command(name='pig', description='üê∑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä—è–∫–µ')
    @cooldown(1, 5, BucketType.user)
    async def pig(
            self, ctx: discord.ApplicationContext, name: discord.Option(
                str, description="–∏–º—è —Ö—Ä—è–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è (—É—á. —Ä–µ–≥–∏—Å—Ç—Ä)", required=False
            ) = None
    ):
        author, _ = await User.get_or_create(discord_id=ctx.user.id)

        if name is None:
            pig = await author.get_pig()
        else:
            pig = await Pig.get_by_name(name)

            if pig is None:
                return await ctx.respond('üò¢ –•—Ä—è–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º - –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral=True)

        embed = await pig.get_embed()

        await ctx.respond(embed=embed)

    @discord.slash_command(name='feed', description='üê∑ –ü–æ–∫–æ—Ä–º–∏—Ç—å —Å–≤–æ–µ–≥–æ —Ö—Ä—è–∫–∞')
    @cooldown(1, 10800, BucketType.user)
    async def feed(self, ctx: discord.ApplicationContext):
        await ctx.defer()

        user, _ = await User.get_or_create(discord_id=ctx.user.id)
        pig = await user.get_pig()

        fat = random.randint(-6, 15)

        await pig.add_weight(fat)

        embed = DefaultEmbed()
        embed.title = pig.name

        embed.add_field(name='üê∑ –í–µ—Å', value=f'{pig.weight} –∫–≥.')
        embed.add_field(name='‚è≤ –í–æ–∑—Ä–∞—Å—Ç', value=f'{pig.age.days} –¥–Ω.')

        if fat < 0:
            embed.description = f'–í–∞—à —Ö—Ä—è–∫ –æ—Ç—Ä–∞–≤–∏–ª—Å—è –∏ –ø–æ—Ö—É–¥–µ–ª –Ω–∞ **{abs(fat)} –∫–≥** üò¢'
        elif fat > 0:
            embed.description = f'–í–∞—à —Ö—Ä—è–∫ –ø–æ–∂–∏—Ä–Ω–µ–ª –Ω–∞ **{fat} –∫–≥**!\n\n'
        else:
            embed.description = "–ú–∞—Å—Å–∞ –≤–∞—à–µ–≥–æ —Ö—Ä—è–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å... üê∑"

        await ctx.respond(embed=embed)

    @discord.slash_command(name='name', description='üê∑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Å–≤–æ–µ–≥–æ —Ö—Ä—è–∫–∞')
    @cooldown(1, 30, BucketType.user)
    async def name(self, ctx: discord.ApplicationContext, name: discord.Option(str, '–∂–µ–ª–∞–µ–º–æ–µ –∏–º—è', max_length=20)):
        user, created = await User.get_or_create(discord_id=ctx.user.id)
        pig = await user.get_pig()
        old_name = pig.name

        if pig.name == name:
            return await ctx.respond('ü§® –í—ã —É–∂–µ –¥–∞–ª–∏ —Ç–∞–∫–æ–µ-–∂–µ –∏–º—è —Å–≤–æ–µ–º—É —Ö—Ä—è–∫—É.', ephemeral=True)

        try:
            await pig.set_name(name)
        except IntegrityError:
            return await ctx.respond(f'–ò–º—è `{name}` —É–∂–µ –∑–∞–Ω—è—Ç–æ üò¢', ephemeral=True)

        if created:
            return await ctx.respond(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Ö—Ä—è–∫–∞ —Å –∏–º–µ–Ω–µ–º `{name}`", ephemeral=True)

        await ctx.respond(f"‚òë –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∏–º—è —Å–≤–æ–µ–≥–æ —Ö—Ä—è–∫–∞ —Å `{old_name}` –Ω–∞ `{name}`", ephemeral=True)

    @cooldown(1, 5, BucketType.user)
    @discord.slash_command(name='top', description='üê∑ –¢–æ–ø —Ö—Ä—è–∫–æ–≤ –ø–æ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å–µ')
    async def top(self, ctx: discord.ApplicationContext):
        await ctx.defer()

        query_set: list[Pig, Any] = await QuerySet(Pig).order_by('-weight').limit(10)

        leaderboard_content = ""

        for i, pig in enumerate(query_set, 1):
            discord_user = await pig.get_owner()
            leaderboard_content += f"{i}. {pig.name} - {pig.weight} –∫–≥.\n- # {discord_user}\n"

        leaderboard = f"```glsl\n{leaderboard_content}```"

        embed = DefaultEmbed()
        embed.title = "üê∑ –¢–æ–ø 10 —Ö—Ä—è–∫–æ–≤"
        embed.description = leaderboard

        await ctx.respond(embed=embed)

    @cooldown(1, 60, BucketType.user)
    @discord.slash_command(name='report', description='üêñ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ö—Ä—è–∫–∞')
    async def report(
            self, ctx: discord.ApplicationContext,
            name: discord.Option(str, description="–ò–º—è —Ö—Ä—è–∫–∞ (—É—á. —Ä–µ–≥–∏—Å—Ç—Ä)", max_length=30),
            reason: discord.Option(str, choices=config.REPORT_REASONS)
    ):
        pig = await Pig.get_by_name(name)

        if pig is None:
            return await ctx.respond('üò¢ –•—Ä—è–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º - –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral=True)

        await ctx.defer(ephemeral=True)

        pig_owner = await pig.get_owner()

        await self.bot.send_critical_log(
            f'–†–µ–ø–æ—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{ctx.user}` –Ω–∞ —Ö—Ä—è–∫–∞ `{pig.name}`, —Ö–æ–∑—è–∏–Ω: `{pig_owner} ({pig_owner.id})`'
            f'\n- –ü—Ä–∏—á–∏–Ω–∞: `{reason}` ||<@352062534469156864>||', logging.CRITICAL
        )

        await ctx.respond("‚òë –†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–ø–∞—Å–∏–±–æ.", ephemeral=True)


def setup(bot):
    bot.add_cog(Pigs(bot))
