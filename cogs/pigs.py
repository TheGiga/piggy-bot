import datetime
import random
from typing import Any

import discord
from discord.ext.commands import cooldown, BucketType
from tortoise.queryset import QuerySet

from src import Piggy, User, Pig, DefaultEmbed


class Pigs(discord.Cog):
    def __init__(self, bot):
        self.bot: Piggy = bot

    @discord.slash_command(name='pig', description='üê∑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä—è–∫–µ')
    @cooldown(1, 5, BucketType.user)
    async def pig(
            self, ctx: discord.ApplicationContext, name: discord.Option(
                str, description="–∏–º—è —Ö—Ä—è–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è (—É—á. —Ä–µ–≥–∏—Å—Ç—Ä)", required=False
            ) = None
    ):
        author, _ = await User.get_or_create(discord_id=ctx.user.id)

        embed = DefaultEmbed()

        if name is None:
            pig = await author.get_pig()
        else:
            pig = await Pig.get_by_name(name)

            if pig is None:
                return await ctx.respond('üò¢ –•—Ä—è–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º - –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral=True)

        embed.title = pig.name
        embed.description = f'–•–æ–∑—è–∏–Ω —Ö—Ä—è–∫–∞: *`{await pig.get_owner()}`*'

        embed.set_thumbnail(url='https://i.imgur.com/EnJ65WL.png')
        embed.add_field(name='üê∑ –í–µ—Å', value=f'{pig.weight} –∫–≥.')
        embed.add_field(name='‚è≤ –í–æ–∑—Ä–∞—Å—Ç', value=f'{pig.age.days} –¥–Ω–µ–π')

        await ctx.respond(embed=embed)

    @discord.slash_command(name='feed', description='üê∑ –ü–æ–∫–æ—Ä–º–∏—Ç—å —Å–≤–æ–µ–≥–æ —Ö—Ä—è–∫–∞')
    @cooldown(1, 86400, BucketType.user)
    async def feed(self, ctx: discord.ApplicationContext):
        await ctx.defer()

        user, _ = await User.get_or_create(discord_id=ctx.user.id)
        pig = await user.get_pig()

        fat = random.randint(3, 15)

        await pig.add_weight(fat)

        embed = DefaultEmbed()
        embed.title = pig.name
        embed.description = f'–í–∞—à —Ö—Ä—è–∫ –ø–æ–∂–∏—Ä–Ω–µ–ª –Ω–∞ **{fat} –∫–≥**!\n\n' \
                            f'{""}'

        embed.add_field(name='üê∑ –í–µ—Å', value=f'{pig.weight} –∫–≥.')
        embed.add_field(name='‚è≤ –í–æ–∑—Ä–∞—Å—Ç', value=f'{pig.age.days} –¥–Ω–µ–π')

        await ctx.respond(embed=embed)

    @discord.slash_command(name='name', description='üê∑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Å–≤–æ–µ–≥–æ —Ö—Ä—è–∫–∞')
    @cooldown(1, 30, BucketType.user)
    async def name(self, ctx: discord.ApplicationContext, name: discord.Option(str, '–∂–µ–ª–∞–µ–º–æ–µ –∏–º—è', max_length=20)):
        user, _ = await User.get_or_create(discord_id=ctx.user.id)
        pig = await user.get_pig()

        if pig.name == name:
            return await ctx.respond('ü§® –í—ã —É–∂–µ –¥–∞–ª–∏ —Ç–∞–∫–æ–µ-–∂–µ –∏–º—è —Å–≤–æ–µ–º—É —Ö—Ä—è–∫—É.', ephemeral=True)

        await ctx.respond(f"‚òë –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∏–º—è —Å–≤–æ–µ–≥–æ —Ö—Ä—è–∫–∞ —Å `{pig.name}` –Ω–∞ `{name}`", ephemeral=True)
        await pig.set_name(name)

    @cooldown(1, 5, BucketType.user)
    @discord.slash_command(name='top', description='üê∑ –¢–æ–ø —Ö—Ä—è–∫–æ–≤ –ø–æ –∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å–µ')
    async def top(self, ctx: discord.ApplicationContext):
        await ctx.defer()

        query_set: list[Pig, Any] = await QuerySet(Pig).order_by('-weight').limit(10)

        leaderboard = ""

        for i, pig in enumerate(query_set, 1):
            discord_user = await pig.get_owner()
            leaderboard += f"{i}. {pig.name} - `{pig.weight} –∫–≥` || {discord_user} ||\n"

        embed = DefaultEmbed()
        embed.title = "üê∑ –¢–æ–ø 10 —Ö—Ä—è–∫–æ–≤"
        embed.description = leaderboard

        await ctx.respond(embed=embed)


def setup(bot):
    bot.add_cog(Pigs(bot))
